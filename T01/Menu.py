import Funcionesimport Objetosencoding = 'utf-8'class Inicio(Objetos.Usuario):    def __init__(self):        self.fecha = 0        self.ano = 0        self.mes = 0        self.dia = 0        self.hora = 0        self.minuto = 0        Inicio.login(self)    def login(self):        print('\nBienvenido a SuperLuchin, por favor ingrese su nombre de usuario y contrasena!\n')        orden_datos = Funciones.orden('usuarios.csv')        self.pos_id = orden_datos.index('id')        self.pos_nombre = orden_datos.index('nombre')        self.pos_contrasena = orden_datos.index('contrase√±a')        self.pos_recurso_id = orden_datos.index('recurso_id')        login = False        while True:            data = open('usuarios.csv', 'r', encoding='utf8')            self.user = str(input('Nombre usuario: '))            self.pw = str(input('Ingresa contrasena: '))            for line in data.readlines():                line = line.strip('\n')                line = line.split(',')                if self.user == line[self.pos_nombre] and self.pw == line[self.pos_contrasena]:                    self.id = line[self.pos_id]                    self.recurso_id = line[self.pos_recurso_id]                    login = True                    break            if login:                print('\nIngreso correcto')                if self.recurso_id == '' or self.recurso_id == '':                    # Aqui identifica si el usuario es ANAF o no, y me crea un objeto segun corresponda.                    self.usuario = Objetos.Anaf(self.id, self.recurso_id)                else:                    self.usuario = Objetos.Normal(self.id, self.recurso_id)                data.close()                print(self.recurso_id)                Inicio.date(self)                break            else:                print('\nUsuario o contrasena incorrecto\n')    def date(self):        self.ano, self.mes, self.dia, self.hora, self.minuto = Funciones.date()        self.fecha = '{0}-{1}-{2} {3}:{4}'.format(self.ano, self.mes, self.dia, self.hora, self.minuto)        print('\nFecha fijada, la fecha es: ' + str(self.ano) + '-' + str(self.mes) + '-' + str(            self.dia))        if self.minuto < 10:            print('Hora actual: ' + str(self.hora) + ':' + '0' + str(self.minuto))        else:            print('Hora actual: ' + str(self.hora) + ':' + str(self.minuto))    def cambiar_fecha(self):        Inicio.date(self)    def cerrar_sesion(self):        Inicio.login(self)class Menu(Inicio):    def __init__(self):        super().__init__()        Menu.elegir_menu(self)    def elegir_menu(self):        if self.recurso_id == '' or self.recurso_id == ' ':            Menu.menu_anaf(self)        else:            Menu.menu_normal(self)    def menu_anaf(self):        exit_loop = True        options = ['1', '2', '3', '4', '5', '6', '7', '8', '9']        while exit_loop:            print(''' \nBienvenido, usted es usuario de ANAF.Eliga una opcion:\n1. Leer incendios2. Leer recursos3. Leer usuarios4. Crear usuario5. Agregar pronosticos6. Agregar incendio7. Consultas avanzadas8. Cambiar fecha9. Cerrar sesionRespuesta: ''')            user_entry = input()            if user_entry in options:                exit_loop = False                Menu.ejecutar_anaf(self, user_entry)            else:                print('Ingrese una opcion valida')    def avanzado_anaf(self):        exit_loop = True        options = ['1', '2', '3', '4', '5']        while exit_loop:            print(''' \nEliga una opcion:\n    1. Incendios activos    2. Incendios apagados    3. Recursos mas utilizados    4. Recursos mas efectivos    5. Planificar estrategia de extincionRespuesta: ''')            user_entry = input()            if user_entry in options:                exit_loop = False                Menu.ejecutar_avanzado(self, user_entry)            else:                print('Ingrese una opcion valida')    def menu_normal(self):        exit_loop = True        options = ['1', '2', '3', '4']        # Reviso el estado actual del usuario        recursos_datos = Funciones.read_file('recursos_datos.txt')        estado_actual = ''        for linea in recursos_datos:            if linea[0] == self.recurso_id:                estado_actual = linea[3]        while exit_loop:            print('\nTu estado actual es: ' + estado_actual)            print(''' \nBienvenido.Eliga una opcion:\n    1. Leer incendio asignado    2. Leer recurso asociado    3. Cambiar fecha    4. Cerrar sesionRespuesta: ''')            user_entry = input()            if user_entry in options:                exit_loop = False                Menu.ejecutar_normal(self, user_entry)            else:                print('Ingrese una opcion valida')    def ejecutar_anaf(self, func):        if func == '1':            self.usuario.leer_incendios(self.fecha)            Menu.elegir_menu(self)        elif func == '2':            self.usuario.leer_recursos()            Menu.elegir_menu(self)        elif func == '3':            self.usuario.leer_usuarios()            Menu.elegir_menu(self)        elif func == '4':            self.usuario.crear_usuarios()            Menu.elegir_menu(self)        elif func == '5':            self.usuario.agregar_pronosticos()            Menu.elegir_menu(self)        elif func == '6':            self.usuario.agregar_incendio()            Menu.elegir_menu(self)        elif func == '7':            Menu.avanzado_anaf(self)            Menu.elegir_menu(self)        elif func == '8':            Menu.date(self)            Menu.elegir_menu(self)        elif func == '9':            Menu.login(self)            Menu.elegir_menu(self)        Menu.menu_anaf(self)    def ejecutar_normal(self, func):        if func == '1':            self.usuario.leer_incendios()            Menu.elegir_menu(self)        elif func == '2':            self.usuario.leer_recursos()            Menu.elegir_menu(self)        elif func == '3':            Menu.date(self)            Menu.elegir_menu(self)        elif func == '4':            Menu.login(self)    def ejecutar_avanzado(self, func):        if func == '1':            self.usuario.incendios_activos(self.fecha)            Menu.elegir_menu(self)        elif func == '2':            self.usuario.incendios_apagados(self.fecha)            Menu.elegir_menu(self)        elif func == '3':            self.usuario.recursos_mas_utilizados()            Menu.elegir_menu(self)        elif func == '4':            self.usuario.recursos_mas_efectivos()            Menu.elegir_menu(self)        elif func == '5':            self.usuario.planificar_estrategia(self.fecha)            Menu.elegir_menu(self)